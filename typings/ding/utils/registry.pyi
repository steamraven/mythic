"""
This type stub file was generated by pyright.
"""

from collections import OrderedDict
from typing import Callable, Iterable, Optional

_innest_error = ...
_DI_ENGINE_REG_TRACE_IS_ON = ...
class Registry(dict):
    """
    Overview:
        A helper class for managing registering modules, it extends a dictionary
        and provides a register functions.
    Interfaces:
        ``__init__``, ``register``, ``get``, ``build``, ``query``, ``query_details``
    Examples (creating):
        >>> some_registry = Registry({"default": default_module})

    Examples (registering: normal way):
        >>> def foo():
        >>>     ...
        >>> some_registry.register("foo_module", foo)

    Examples (registering: decorator way):
        >>> @some_registry.register("foo_module")
        >>> @some_registry.register("foo_modeul_nickname")
        >>> def foo():
        >>>     ...

    Examples (accessing):
        >>> f = some_registry["foo_module"]
    """
    def __init__(self, *args, **kwargs) -> None:
        """
        Overview:
            Initialize the Registry object.
        Arguments:
            - args (:obj:`Tuple`): The arguments passed to the ``__init__`` function of the parent class, \
                dict.
            - kwargs (:obj:`Dict`): The keyword arguments passed to the ``__init__`` function of the parent class, \
                dict.
        """
        ...
    
    def register(self, module_name: Optional[str] = ..., module: Optional[Callable] = ..., force_overwrite: bool = ...) -> Callable:
        """
        Overview:
            Register the module.
        Arguments:
            - module_name (:obj:`Optional[str]`): The name of the module.
            - module (:obj:`Optional[Callable]`): The module to be registered.
            - force_overwrite (:obj:`bool`): Whether to overwrite the module with the same name.
        """
        ...
    
    def get(self, module_name: str) -> Callable:
        """
        Overview:
            Get the module.
        Arguments:
            - module_name (:obj:`str`): The name of the module.
        """
        ...
    
    def build(self, obj_type: str, *obj_args, **obj_kwargs) -> object:
        """
        Overview:
            Build the object.
        Arguments:
            - obj_type (:obj:`str`): The type of the object.
            - obj_args (:obj:`Tuple`): The arguments passed to the object.
            - obj_kwargs (:obj:`Dict`): The keyword arguments passed to the object.
        """
        ...
    
    def query(self) -> Iterable:
        """
        Overview:
            all registered module names.
        """
        ...
    
    def query_details(self, aliases: Optional[Iterable] = ...) -> OrderedDict:
        """
        Overview:
            Get the details of the registered modules.
        Arguments:
            - aliases (:obj:`Optional[Iterable]`): The aliases of the modules.
        """
        ...
    


